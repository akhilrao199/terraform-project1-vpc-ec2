Default region name [None]: us-east-1 
Default output format [None]: table
akhilrao@Akhils-MacBook-Air ~ % ls
akhil		Desktop		Downloads	Movies		Pictures
Applications	Documents	Library		Music		Public
akhilrao@Akhils-MacBook-Air ~ % cd akhil 
akhilrao@Akhils-MacBook-Air akhil % ls
ansible		ecommerce	kubernetes-pro	terraform	uma_projects
akhilrao@Akhils-MacBook-Air akhil % cd terraform 
akhilrao@Akhils-MacBook-Air terraform % cd aws-ab 
akhilrao@Akhils-MacBook-Air aws-ab % ls
main.tf			outputs.tf		variables.tf
modules			terraform.tfvars
akhilrao@Akhils-MacBook-Air aws-ab % vi terraform.tfvars 
akhilrao@Akhils-MacBook-Air aws-ab % vi variables.tf 
akhilrao@Akhils-MacBook-Air aws-ab % vi main.tf 
akhilrao@Akhils-MacBook-Air aws-ab % vi modules/vpc/main.tf 
akhilrao@Akhils-MacBook-Air aws-ab % ls 
main.tf			outputs.tf		variables.tf
modules			terraform.tfvars
akhilrao@Akhils-MacBook-Air aws-ab % clear

akhilrao@Akhils-MacBook-Air aws-ab % terraform init
Initializing the backend...
Initializing modules...
- vpc in modules/vpc
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.99.1...
- Installed hashicorp/aws v5.99.1 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
akhilrao@Akhils-MacBook-Air aws-ab % terraform plan
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.10.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.10.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.10.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "tf-vpc"
        }
      + tags_all                             = {
          + "Name" = "tf-vpc"
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + private_subnets = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id          = (known after apply)

───────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
akhilrao@Akhils-MacBook-Air aws-ab % terraform apply
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.data.aws_availability_zones.available: Read complete after 2s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.10.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.10.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.10.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "tf-vpc"
        }
      + tags_all                             = {
          + "Name" = "tf-vpc"
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + private_subnets = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id          = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_vpc.main: Creating...
module.vpc.aws_vpc.main: Creation complete after 4s [id=vpc-02a57dec4fcad3b69]
module.vpc.aws_subnet.private[0]: Creating...
module.vpc.aws_subnet.private[1]: Creating...
module.vpc.aws_subnet.private[0]: Creation complete after 1s [id=subnet-032d9f2ca73c8aaf8]
module.vpc.aws_subnet.private[1]: Creation complete after 1s [id=subnet-01c7d0c0fe6f65590]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:

private_subnets = [
  "subnet-032d9f2ca73c8aaf8",
  "subnet-01c7d0c0fe6f65590",
]
vpc_id = "vpc-02a57dec4fcad3b69"
akhilrao@Akhils-MacBook-Air aws-ab % vi terraform.tfvars   
akhilrao@Akhils-MacBook-Air aws-ab % vi main.tf
akhilrao@Akhils-MacBook-Air aws-ab % vi modules/vpc 
akhilrao@Akhils-MacBook-Air aws-ab % vi modules/vpc/main.tf 
akhilrao@Akhils-MacBook-Air aws-ab % ls
main.tf			outputs.tf		terraform.tfvars
modules			terraform.tfstate	variables.tf
akhilrao@Akhils-MacBook-Air aws-ab % vi main.tf 
akhilrao@Akhils-MacBook-Air aws-ab % terraform plan
╷
│ Error: Unsupported argument
│ 
│   on main.tf line 10, in module "vpc":
│   10:   vpc_name             = var.vpc_name
│ 
│ An argument named "vpc_name" is not expected here.
╵
akhilrao@Akhils-MacBook-Air aws-ab % vi modules/vpc/variables.tf 
akhilrao@Akhils-MacBook-Air aws-ab % vi variables.tf 
akhilrao@Akhils-MacBook-Air aws-ab % terraform destroy
╷
│ Error: Module not installed
│ 
│   on main.tf line 13:
│   13: module "ec2" {
│ 
│ This module is not yet installed. Run "terraform init" to install all modules
│ required by this configuration.
╵
akhilrao@Akhils-MacBook-Air aws-ab % terraform init
Initializing the backend...
Initializing modules...
- ec2 in modules/ec2
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.99.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
akhilrao@Akhils-MacBook-Air aws-ab % terraform plan   
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.aws_vpc.main: Refreshing state... [id=vpc-02a57dec4fcad3b69]
module.vpc.data.aws_availability_zones.available: Read complete after 2s [id=us-east-1]
module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-01c7d0c0fe6f65590]
module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-032d9f2ca73c8aaf8]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # module.ec2.aws_instance.this will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0953476d60561c955"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = false
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-032d9f2ca73c8aaf8"
      + tags                                 = {
          + "Name" = "akhil-ec2"
        }
      + tags_all                             = {
          + "Name" = "akhil-ec2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # module.vpc.aws_vpc.main will be updated in-place
  ~ resource "aws_vpc" "main" {
        id                                   = "vpc-02a57dec4fcad3b69"
      ~ tags                                 = {
          ~ "Name" = "tf-vpc" -> "var.vpc-name"
        }
      ~ tags_all                             = {
          ~ "Name" = "tf-vpc" -> "var.vpc-name"
        }
        # (18 unchanged attributes hidden)
    }

Plan: 1 to add, 1 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
akhilrao@Akhils-MacBook-Air aws-ab % terraform apply
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.aws_vpc.main: Refreshing state... [id=vpc-02a57dec4fcad3b69]
module.vpc.data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-032d9f2ca73c8aaf8]
module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-01c7d0c0fe6f65590]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # module.ec2.aws_instance.this will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0953476d60561c955"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = false
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-032d9f2ca73c8aaf8"
      + tags                                 = {
          + "Name" = "akhil-ec2"
        }
      + tags_all                             = {
          + "Name" = "akhil-ec2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # module.vpc.aws_vpc.main will be updated in-place
  ~ resource "aws_vpc" "main" {
        id                                   = "vpc-02a57dec4fcad3b69"
      ~ tags                                 = {
          ~ "Name" = "tf-vpc" -> "var.vpc-name"
        }
      ~ tags_all                             = {
          ~ "Name" = "tf-vpc" -> "var.vpc-name"
        }
        # (18 unchanged attributes hidden)
    }

Plan: 1 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_vpc.main: Modifying... [id=vpc-02a57dec4fcad3b69]
module.vpc.aws_vpc.main: Modifications complete after 3s [id=vpc-02a57dec4fcad3b69]
module.ec2.aws_instance.this: Creating...
module.ec2.aws_instance.this: Still creating... [00m10s elapsed]
module.ec2.aws_instance.this: Creation complete after 16s [id=i-066f0128eef497c67]

Apply complete! Resources: 1 added, 1 changed, 0 destroyed.

Outputs:

private_subnets = [
  "subnet-032d9f2ca73c8aaf8",
  "subnet-01c7d0c0fe6f65590",
]
vpc_id = "vpc-02a57dec4fcad3b69"
akhilrao@Akhils-MacBook-Air aws-ab % cat main.tf 
provider "aws" {
  region = "us-east-1"
}

module "vpc" {
  source = "./modules/vpc"

  vpc_cidr             = var.vpc_cidr
  private_subnet_cidrs = var.private_subnet_cidrs
  vpc_name             = var.vpc_name
}

module "ec2" {
  source        = "./modules/ec2"
  subnet_id     = module.vpc.private_subnet_ids[0]
  ami_id        = var.ami_id
  ec2_name      = var.ec2_name
  instance_type = var.instance_type
}
akhilrao@Akhils-MacBook-Air aws-ab % vi variables.tf 
akhilrao@Akhils-MacBook-Air aws-ab % ls             
main.tf				terraform.tfstate.backup
modules				terraform.tfvars
outputs.tf			variables.tf
terraform.tfstate
akhilrao@Akhils-MacBook-Air aws-ab % vi terraform.tfvars 
akhilrao@Akhils-MacBook-Air aws-ab % cd modules/vpc 
akhilrao@Akhils-MacBook-Air vpc % cat main.tf 
resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr

  tags = {
    Name = "var.vpc-name"
  }
}

data "aws_availability_zones" "available" {}

resource "aws_subnet" "private" {
  count                   = length(var.private_subnet_cidrs)
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.private_subnet_cidrs[count.index]
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = false

  tags = {
    Name = "private-subnet-${count.index + 1}"
  }
}
akhilrao@Akhils-MacBook-Air vpc % vi main.tf 
akhilrao@Akhils-MacBook-Air vpc % vi variables.tf 
akhilrao@Akhils-MacBook-Air vpc % cd ../..
akhilrao@Akhils-MacBook-Air aws-ab % terraform apply
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.aws_vpc.main: Refreshing state... [id=vpc-02a57dec4fcad3b69]
module.vpc.data.aws_availability_zones.available: Read complete after 2s [id=us-east-1]
module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-01c7d0c0fe6f65590]
module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-032d9f2ca73c8aaf8]
module.ec2.aws_instance.this: Refreshing state... [id=i-066f0128eef497c67]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # module.vpc.aws_vpc.main will be updated in-place
  ~ resource "aws_vpc" "main" {
        id                                   = "vpc-02a57dec4fcad3b69"
      ~ tags                                 = {
          ~ "Name" = "var.vpc-name" -> "var.vpc_name"
        }
      ~ tags_all                             = {
          ~ "Name" = "var.vpc-name" -> "var.vpc_name"
        }
        # (18 unchanged attributes hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_vpc.main: Modifying... [id=vpc-02a57dec4fcad3b69]
module.vpc.aws_vpc.main: Modifications complete after 3s [id=vpc-02a57dec4fcad3b69]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.

Outputs:

private_subnets = [
  "subnet-032d9f2ca73c8aaf8",
  "subnet-01c7d0c0fe6f65590",
]
vpc_id = "vpc-02a57dec4fcad3b69"
akhilrao@Akhils-MacBook-Air aws-ab % cd modules/vpc 
akhilrao@Akhils-MacBook-Air vpc % vi main.tf 
akhilrao@Akhils-MacBook-Air vpc % terraform apply
var.private_subnet_cidrs
  List of private subnet CIDRs

  Enter a value: yes

var.vpc_cidr
  CIDR block for the VPC

  Enter a value: ^Z 
zsh: suspended  terraform apply
akhilrao@Akhils-MacBook-Air vpc % cd ..          
akhilrao@Akhils-MacBook-Air modules % cd ..
akhilrao@Akhils-MacBook-Air aws-ab % terraform apply
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.aws_vpc.main: Refreshing state... [id=vpc-02a57dec4fcad3b69]
module.vpc.data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-032d9f2ca73c8aaf8]
module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-01c7d0c0fe6f65590]
module.ec2.aws_instance.this: Refreshing state... [id=i-066f0128eef497c67]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # module.vpc.aws_vpc.main will be updated in-place
  ~ resource "aws_vpc" "main" {
        id                                   = "vpc-02a57dec4fcad3b69"
      ~ tags                                 = {
          ~ "Name" = "var.vpc_name" -> "akhil-vpc-tf"
        }
      ~ tags_all                             = {
          ~ "Name" = "var.vpc_name" -> "akhil-vpc-tf"
        }
        # (18 unchanged attributes hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_vpc.main: Modifying... [id=vpc-02a57dec4fcad3b69]
module.vpc.aws_vpc.main: Modifications complete after 3s [id=vpc-02a57dec4fcad3b69]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.

Outputs:

private_subnets = [
  "subnet-032d9f2ca73c8aaf8",
  "subnet-01c7d0c0fe6f65590",
]
vpc_id = "vpc-02a57dec4fcad3b69"
akhilrao@Akhils-MacBook-Air aws-ab % vi main.tf 
akhilrao@Akhils-MacBook-Air aws-ab % terraform apply
╷
│ Error: Unsupported argument
│ 
│   on main.tf line 14:
│   14:   source        = "./modules/ec2"
│ 
│ An argument named "source" is not expected here.
╵
╷
│ Error: Unsupported argument
│ 
│   on main.tf line 15:
│   15:   subnet_id     = module.vpc.private_subnet_ids[0]
│ 
│ An argument named "subnet_id" is not expected here.
╵
╷
│ Error: Unsupported argument
│ 
│   on main.tf line 16:
│   16:   ami_id        = var.ami_id
│ 
│ An argument named "ami_id" is not expected here.
╵
╷
│ Error: Unsupported argument
│ 
│   on main.tf line 17:
│   17:   ec2_name      = var.ec2_name
│ 
│ An argument named "ec2_name" is not expected here.
╵
╷
│ Error: Unsupported argument
│ 
│   on main.tf line 18:
│   18:   instance_type = var.instance_type
│ 
│ An argument named "instance_type" is not expected here.
╵
╷
│ Error: Argument or block definition required
│ 
│   on main.tf line 19:
│   19: }
│ 
│ An argument or block definition is required here.
╵
akhilrao@Akhils-MacBook-Air aws-ab % vi main.tf     
akhilrao@Akhils-MacBook-Air aws-ab % terraform apply
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.aws_vpc.main: Refreshing state... [id=vpc-02a57dec4fcad3b69]
module.ec2.aws_instance.this: Refreshing state... [id=i-066f0128eef497c67]
module.vpc.data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-01c7d0c0fe6f65590]
module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-032d9f2ca73c8aaf8]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # module.ec2.aws_instance.this will be destroyed
  # (because aws_instance.this is not in configuration)
  - resource "aws_instance" "this" {
      - ami                                  = "ami-0953476d60561c955" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:834153250791:instance/i-066f0128eef497c67" -> null
      - associate_public_ip_address          = false -> null
      - availability_zone                    = "us-east-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-066f0128eef497c67" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-05d62c2120ba7d04f" -> null
      - private_dns                          = "ip-10-10-1-193.ec2.internal" -> null
      - private_ip                           = "10.10.1.193" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-032d9f2ca73c8aaf8" -> null
      - tags                                 = {
          - "Name" = "akhil-ec2"
        } -> null
      - tags_all                             = {
          - "Name" = "akhil-ec2"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-02eaab286618a1456",
        ] -> null
        # (10 unchanged attributes hidden)

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
            # (1 unchanged attribute hidden)
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-00193292e0dcc7f20" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
            # (1 unchanged attribute hidden)
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.ec2.aws_instance.this: Destroying... [id=i-066f0128eef497c67]
module.ec2.aws_instance.this: Still destroying... [id=i-066f0128eef497c67, 00m10s elapsed]
module.ec2.aws_instance.this: Still destroying... [id=i-066f0128eef497c67, 00m20s elapsed]
module.ec2.aws_instance.this: Still destroying... [id=i-066f0128eef497c67, 00m30s elapsed]
module.ec2.aws_instance.this: Destruction complete after 32s

Apply complete! Resources: 0 added, 0 changed, 1 destroyed.

Outputs:

private_subnets = [
  "subnet-032d9f2ca73c8aaf8",
  "subnet-01c7d0c0fe6f65590",
]
vpc_id = "vpc-02a57dec4fcad3b69"
akhilrao@Akhils-MacBook-Air aws-ab % vi main.tf     
akhilrao@Akhils-MacBook-Air aws-ab % terraform apply
╷
│ Error: Reference to undeclared module
│ 
│   on outputs.tf line 2, in output "vpc_id":
│    2:   value = module.vpc.vpc_id
│ 
│ No module call named "vpc" is declared in the root module.
╵
╷
│ Error: Reference to undeclared module
│ 
│   on outputs.tf line 6, in output "private_subnets":
│    6:   value = module.vpc.private_subnet_ids
│ 
│ No module call named "vpc" is declared in the root module.
╵
akhilrao@Akhils-MacBook-Air aws-ab % vi main.tf     
akhilrao@Akhils-MacBook-Air aws-ab % terraform destroy -target=module.vpc
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.aws_vpc.main: Refreshing state... [id=vpc-02a57dec4fcad3b69]
module.vpc.data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
module.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-032d9f2ca73c8aaf8]
module.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-01c7d0c0fe6f65590]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # module.vpc.aws_subnet.private[0] will be destroyed
  - resource "aws_subnet" "private" {
      - arn                                            = "arn:aws:ec2:us-east-1:834153250791:subnet/subnet-032d9f2ca73c8aaf8" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1a" -> null
      - availability_zone_id                           = "use1-az1" -> null
      - cidr_block                                     = "10.10.1.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-032d9f2ca73c8aaf8" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "834153250791" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Name" = "private-subnet-1"
        } -> null
      - tags_all                                       = {
          - "Name" = "private-subnet-1"
        } -> null
      - vpc_id                                         = "vpc-02a57dec4fcad3b69" -> null
        # (4 unchanged attributes hidden)
    }

  # module.vpc.aws_subnet.private[1] will be destroyed
  - resource "aws_subnet" "private" {
      - arn                                            = "arn:aws:ec2:us-east-1:834153250791:subnet/subnet-01c7d0c0fe6f65590" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1b" -> null
      - availability_zone_id                           = "use1-az2" -> null
      - cidr_block                                     = "10.10.2.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-01c7d0c0fe6f65590" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "834153250791" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Name" = "private-subnet-2"
        } -> null
      - tags_all                                       = {
          - "Name" = "private-subnet-2"
        } -> null
      - vpc_id                                         = "vpc-02a57dec4fcad3b69" -> null
        # (4 unchanged attributes hidden)
    }

  # module.vpc.aws_vpc.main will be destroyed
  - resource "aws_vpc" "main" {
      - arn                                  = "arn:aws:ec2:us-east-1:834153250791:vpc/vpc-02a57dec4fcad3b69" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.10.0.0/16" -> null
      - default_network_acl_id               = "acl-06fc864bba048bef1" -> null
      - default_route_table_id               = "rtb-0f8a11fc524ea7d37" -> null
      - default_security_group_id            = "sg-02eaab286618a1456" -> null
      - dhcp_options_id                      = "dopt-0b5e0d9affd61a858" -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-02a57dec4fcad3b69" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-0f8a11fc524ea7d37" -> null
      - owner_id                             = "834153250791" -> null
      - tags                                 = {
          - "Name" = "akhil-vpc-tf"
        } -> null
      - tags_all                             = {
          - "Name" = "akhil-vpc-tf"
        } -> null
        # (4 unchanged attributes hidden)
    }

Plan: 0 to add, 0 to change, 3 to destroy.
╷
│ Warning: Resource targeting is in effect
│ 
│ You are creating a plan with the -target option, which means that the result
│ of this plan may not represent all of the changes requested by the current
│ configuration.
│ 
│ The -target option is not for routine use, and is provided only for
│ exceptional situations such as recovering from errors or mistakes, or when
│ Terraform specifically suggests to use it as part of an error message.
╵

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

module.vpc.aws_subnet.private[1]: Destroying... [id=subnet-01c7d0c0fe6f65590]
module.vpc.aws_subnet.private[0]: Destroying... [id=subnet-032d9f2ca73c8aaf8]
module.vpc.aws_subnet.private[0]: Destruction complete after 2s
module.vpc.aws_subnet.private[1]: Destruction complete after 2s
module.vpc.aws_vpc.main: Destroying... [id=vpc-02a57dec4fcad3b69]
module.vpc.aws_vpc.main: Destruction complete after 1s
╷
│ Warning: Applied changes may be incomplete
│ 
│ The plan was created with the -target option in effect, so some changes
│ requested in the configuration may have been ignored and the output values
│ may not be fully updated. Run the following command to verify that no other
│ changes are pending:
│     terraform plan
│ 
│ Note that the -target option is not suitable for routine use, and is provided
│ only for exceptional situations such as recovering from errors or mistakes,
│ or when Terraform specifically suggests to use it as part of an error
│ message.
╵

Destroy complete! Resources: 3 destroyed.
akhilrao@Akhils-MacBook-Air aws-ab % # EC2 instances
aws ec2 describe-instances
